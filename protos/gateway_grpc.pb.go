// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goftxlogistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartDataExchangeClient is the client API for ChartDataExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartDataExchangeClient interface {
	OHLC(ctx context.Context, in *GetWindow, opts ...grpc.CallOption) (*WindowDataArray, error)
}

type chartDataExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewChartDataExchangeClient(cc grpc.ClientConnInterface) ChartDataExchangeClient {
	return &chartDataExchangeClient{cc}
}

func (c *chartDataExchangeClient) OHLC(ctx context.Context, in *GetWindow, opts ...grpc.CallOption) (*WindowDataArray, error) {
	out := new(WindowDataArray)
	err := c.cc.Invoke(ctx, "/protos.chartDataExchange/OHLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartDataExchangeServer is the server API for ChartDataExchange service.
// All implementations must embed UnimplementedChartDataExchangeServer
// for forward compatibility
type ChartDataExchangeServer interface {
	OHLC(context.Context, *GetWindow) (*WindowDataArray, error)
	mustEmbedUnimplementedChartDataExchangeServer()
}

// UnimplementedChartDataExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedChartDataExchangeServer struct {
}

func (UnimplementedChartDataExchangeServer) OHLC(context.Context, *GetWindow) (*WindowDataArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OHLC not implemented")
}
func (UnimplementedChartDataExchangeServer) mustEmbedUnimplementedChartDataExchangeServer() {}

// UnsafeChartDataExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartDataExchangeServer will
// result in compilation errors.
type UnsafeChartDataExchangeServer interface {
	mustEmbedUnimplementedChartDataExchangeServer()
}

func RegisterChartDataExchangeServer(s grpc.ServiceRegistrar, srv ChartDataExchangeServer) {
	s.RegisterService(&ChartDataExchange_ServiceDesc, srv)
}

func _ChartDataExchange_OHLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWindow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartDataExchangeServer).OHLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.chartDataExchange/OHLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartDataExchangeServer).OHLC(ctx, req.(*GetWindow))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartDataExchange_ServiceDesc is the grpc.ServiceDesc for ChartDataExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartDataExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.chartDataExchange",
	HandlerType: (*ChartDataExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OHLC",
			Handler:    _ChartDataExchange_OHLC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
